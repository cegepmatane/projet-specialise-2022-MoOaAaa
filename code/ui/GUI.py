# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime
import sys
import traceback
from pathlib import Path
sys.path.insert(1, str(Path(__file__).parents[2].absolute()))
sys.path.insert(2, str(Path(__file__).parents[1].absolute()))
sys.path.extend([str(Path(__file__).parents[1] / "src")])
print(sys.path)
import time
from datetime import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from src.GrammarCorrect import GrammarCorrect

'''
Worker class
'''
class Worker(QObject):
    finished = pyqtSignal()

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()
        self.fn = fn
        self.args = args
        self.kwargs = kwargs

    def run(self):
        try:
            self.fn(*self.args, **self.kwargs)
        except:
            traceback.print_exc()
        else:
            print("Worker worked...")
            self.finished.emit()
            self.thread().exit()


class LoadingScreeen(QWidget):

    def __init__(self,lang):
        super().__init__()
        self.setFixedSize(700,350)
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

        self.n = 100
        self.lang = lang
        self.tool = GrammarCorrect(self.lang)

        self.loadingScreen()

        self.timer = QTimer()
        self.timer.timeout.connect(self.loading)


    def loadingScreen(self):
        layout = QVBoxLayout()
        self.setLayout(layout)

        self.frame = QFrame()
        self.frame.setObjectName("frame")
        layout.addWidget(self.frame)

        self.progressBar = QProgressBar(self.frame)
        self.progressBar.resize(self.width() - 200 - 10, 50)
        self.progressBar.move(100, 180)  # self.descriptionLabel.y()+130
        self.progressBar.setAlignment(Qt.AlignCenter)
        self.progressBar.setFormat('%p%')
        self.progressBar.setTextVisible(False)
        self.progressBar.setRange(0, self.n)
        self.progressBar.setValue(2)

        self.titleLabel = QLabel(self.frame)
        self.titleLabel.setObjectName('titleLabel')
        self.titleLabel.resize(690, 120)
        self.titleLabel.move(0, 5)
        self.titleLabel.setText('Loading Screen')
        self.titleLabel.setAlignment(Qt.AlignCenter)

        self.descriptionLabel = QLabel(self.frame)
        self.descriptionLabel.resize(690, 40)
        self.descriptionLabel.move(0, self.titleLabel.height())
        self.descriptionLabel.setObjectName('descLabel')
        self.descriptionLabel.setText('<b>Corrector</b>')
        self.descriptionLabel.setAlignment(Qt.AlignCenter)


        self.loadingLabel = QLabel(self.frame)
        self.loadingLabel.resize(self.width() - 10, 50)
        self.loadingLabel.move(0, self.progressBar.y() + 70)
        self.loadingLabel.setObjectName('loadingLabel')
        self.loadingLabel.setAlignment(Qt.AlignCenter)
        self.loadingLabel.setText('Loading...')

        qtRectangle = self.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        self.move(qtRectangle.topLeft())

    def setProgressBarVal(self,val):
        self.progressBar.setValue(val)

    def loading(self):
        self.thread = QThread()
        self.worker = Worker(self.tool.check,"")
        self.worker.moveToThread(self.thread)

        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        self.thread.start()
        i=0
        while self.thread.isRunning():
            if not i == 99:
                i+=1
                time.sleep(0.01)
                self.setProgressBarVal(i)
                # print("amalive at :" + datetime.now().strftime("%H:%M:%S"))
            else :
                i=0
        # print("amdead at :" + datetime.now().strftime("%H:%M:%S"))
        self.timer.stop()
        self.close()
        time.sleep(1)
        self.Ui_MainWindow = Ui_MainWindow()
        self.Ui_MainWindow.tool = self.tool
        self.Ui_MainWindow.show()

    def run(self):
        self.show()
        self.timer.start(30)

class Ui_MainWindow(QMainWindow):

    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.tool = ""

        self.setupUi(self)
        self.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 589)
        self.centralWidget = QtWidgets.QWidget(self)
        self.centralWidget.setObjectName("centralWidget")

        self.correctBtn = QtWidgets.QPushButton(self.centralWidget)
        self.correctBtn.setGeometry(QtCore.QRect(10, 500, 90, 25))
        self.correctBtn.setObjectName("correctBtn")
        self.correctBtn.clicked.connect(self.correctClick)

        self.suppr_all = QtWidgets.QPushButton(self.centralWidget)
        self.suppr_all.setGeometry(QtCore.QRect(130, 500, 90, 25))
        self.suppr_all.setObjectName("suppr_all")
        self.suppr_all.clicked.connect(self.supprClick)

        self.typosTxt = QtWidgets.QTextEdit(self.centralWidget)
        self.typosTxt.setGeometry(QtCore.QRect(405, 5, 390, 240))
        self.typosTxt.setReadOnly(True)
        self.typosTxt.setObjectName("correctedTxt")
        self.correctedScrollBar = self.typosTxt.verticalScrollBar()
        self.correctedScrollBar.setValue(self.correctedScrollBar.maximum())

        self.correctedTxt = QtWidgets.QTextEdit(self.centralWidget)
        self.correctedTxt.setGeometry(QtCore.QRect(405, 250, 390, 240))
        self.correctedTxt.setReadOnly(True)
        self.correctedTxt.setObjectName("correctedTxt")
        self.correctedScrollBar = self.correctedTxt.verticalScrollBar()
        self.correctedScrollBar.setValue(self.correctedScrollBar.maximum())

        self.textToCorrect = QtWidgets.QTextEdit(self.centralWidget)
        self.textToCorrect.setGeometry(QtCore.QRect(5, 5, 390, 485))
        self.textToCorrect.setObjectName("textToCorrect")
        self.textToCorrect.setPlaceholderText("Tapez du texte à corriger ou collez du texte")
        self.toCorrectScrollBar = self.textToCorrect.verticalScrollBar()
        self.toCorrectScrollBar.setValue(self.toCorrectScrollBar.maximum())

        MainWindow.setCentralWidget(self.centralWidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        qtRectangle = self.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        self.move(qtRectangle.topLeft())

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Correcteur"))
        self.correctBtn.setText(_translate("MainWindow", "Corriger"))
        self.suppr_all.setText(_translate("MainWindow", "Tout supprimer"))

    def correctClick(self):
        toCorrect = self.textToCorrect.toPlainText()
        print(toCorrect)
        print(self.tool.check(toCorrect))

        toolCheck = self.tool.check(toCorrect)
        categories = {match.category: match.message for match in toolCheck}
        print(categories)

        message = [( match.category + ' :\n  ' + match.message) for match in toolCheck]
        correct = self.tool.correct(toCorrect)

        s = '\n\n'.join(message)
        self.typosTxt.setText(s)
        self.correctedTxt.setText("Correction proposée : \n\n" + correct)

    def supprClick(self):
        self.textToCorrect.setText("")
        self.correctedTxt.setText("")


def main():
    app = QApplication(sys.argv)
    with open('stylesheet.qss', 'r') as f:
        style = f.read()
    app.setStyleSheet(style)
    form = LoadingScreeen('fr')
    form.run()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()